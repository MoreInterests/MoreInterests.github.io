<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java-day03</title>
      <link href="/2020/060211165.html"/>
      <url>/2020/060211165.html</url>
      
        <content type="html"><![CDATA[<p>1:运算符(掌握)  </p><pre><code>(1)算术运算符    A:+,-,*,/,%,++,--    B:+的用法        a:加法        b:正号        c:字符串连接符    C:/和%的区别        数据做除法操作的时候，/取得是商，%取得是余数    D:++和--的用法        a:他们的作用是自增或者自减        b:使用            **单独使用                放在操作数据的前面和后面效果一样。                a++或者++a效果一样。            **参与操作使用                放在操作数的前面：先自增或者自减，再参与操作                    int a = 10;                    int b = ++a;                放在操作数的后面：先参与操作，再自增或者自减                    int a = 10;                    int b = a++;(2)赋值运算符    A:=,+=,-=,*=,/=,%=等    B:=叫做赋值运算符，也是最基本的赋值运算符        int x = 10; 把10赋值给int类型的变量x。    C:扩展的赋值运算符的特点        隐含了自动强制转换。        面试题：            short s = 1;            s = s + 1;            short s = 1;            s += 1;            请问上面的代码哪个有问题?(3)比较运算符    A:==,!=,&gt;,&gt;=,&lt;,&lt;=    B:无论运算符两端简单还是复杂最终结果是boolean类型。    C:千万不要把==写成了=(4)逻辑运算符    A:&amp;,|,^,!,&amp;&amp;,||    B:逻辑运算符用于连接boolean类型的式子    C:结论        &amp;:有false则false        |:有true则true        ^:相同则false，不同则true。            情侣关系。        !:非true则false，非false则true        &amp;&amp;:结果和&amp;是一样的，只不过有短路效果。左边是false，右边不执行。        ||:结果和|是一样的，只不过有短路效果。左边是true，右边不执行。(5)位运算符(了解)    A:^的特殊用法        一个数据针对另一个数据位异或两次，该数不变    B:面试题        a:请实现两个变量的交换            **采用第三方变量            **用位异或运算符                左边a,b,a                右边a^b        b:请用最有效率的方式计算出2乘以8的结果            2&lt;&lt;3(6)三元运算符    A:格式        比较表达式?表达式1:表达式2;    B:执行流程：        首先计算比较表达式的值，看是true还是false。        如果是true，表达式1就是结果。        如果是false，表达式2就是结果。    C:案例：        a:比较两个数据是否相等        b:获取两个数据中的最大值        c:获取三个数据中的最大值</code></pre><p>2:键盘录入(掌握)  </p><pre><code>(1)实际开发中，数据是变化的，为了提高程序的灵活性，我们加入键盘录入数据。(2)如何实现呢?目前就记住    A:导包        import java.util.Scanner;        位置：在class的上边    B:创建对象        Scanner sc = new Scanner(System.in);    C:获取数据        int x = sc.nextInt();(3)把三元运算符的案例加入键盘录入改进。</code></pre><p>3:流程控制语句  </p><pre><code>(1)顺序结构 从上往下，依次执行(2)选择结构    按照不同的选择，执行不同的代码(3)循环结构 做一些重复的代码</code></pre><p>4:if语句(掌握)  </p><pre><code>(1)三种格式    A:格式1        if(比较表达式) {            语句体;        }        执行流程：            判断比较表达式的值，看是true还是false            如果是true，就执行语句体            如果是false，就不执行语句体    B:格式2        if(比较表达式) {            语句体1;        }else {            语句体2;        }        执行流程：            判断比较表达式的值，看是true还是false            如果是true，就执行语句体1            如果是false，就执行语句体2    C:格式3        if(比较表达式1) {            语句体1;        }else if(比较表达式2){            语句体2;        }        ...        else {            语句体n+1;        }        执行流程：            判断比较表达式1的值，看是true还是false            如果是true，就执行语句体1            如果是false，就继续判断比较表达式2的值，看是true还是false            如果是true，就执行语句体2            如果是false，就继续判断比较表达式3的值，看是true还是false            ...            如果都不满足，就执行语句体n+1(2)注意事项    A:比较表达式无论简单还是复杂，结果是boolean类型    B:if语句控制的语句体如果是一条语句，是可以省略大括号的；如果是多条，不能省略。        建议：永远不要省略。    C:一般来说，有左大括号，就没有分号，有分号，就没有左大括号。    D:else后面如果没有if，是不会出现比较表达式的。    E:三种if语句其实都是一个语句，只要有一个执行，其他的就不再执行。(3)案例：    A:比较两个数是否相等    B:获取两个数中的最大值    C:获取三个数中的最大值(if语句的嵌套)    D:根据成绩输出对应的等级    E:根据月份，输出对应的季节    F:根据x计算对应y的值并输出(4)三元运算符和if语句第二种格式的关系    所有的三元运算符能够实现的，if语句的第二种格式都能实现。    反之不成立。    如果if语句第二种格式控制的语句体是输出语句，就不可以。    因为三元运算符是一个运算符，必须要有一个结果返回，不能是一个输出语句。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-day02</title>
      <link href="/2020/060160252.html"/>
      <url>/2020/060160252.html</url>
      
        <content type="html"><![CDATA[<p>1:关键字(掌握)  </p><pre><code>(1)被Java语言赋予特定含义的单词(2)特点：    全部小写。(3)注意事项：    A:goto和const作为保留字存在。    B:类似于Notepad++这样的高级记事本会对关键字有特殊颜色标记</code></pre><p>2:标识符(掌握)  </p><pre><code>(1)就是给类，接口，方法，变量等起名字的字符序列(2)组成规则：    A:英文大小写字母    B:数字    C:$和_(3)注意事项：    A:不能以数字开头    B:不能是java中的关键字    C:区分大小写(4)常见的命名规则(见名知意)    A:包    全部小写        单级包：小写            举例：liuyi,com        多级包：小写，并用.隔开            举例：cn.itcast,com.baidu                    B:类或者接口        一个单词：首字母大写            举例：Student,Demo        多个单词：每个单词首字母大写            举例：HelloWorld,StudentName    C:方法或者变量        一个单词：首字母小写            举例：name,main        多个单词：从第二个单词开始，每个单词首字母大写            举例：studentAge,showAllNames()    D:常量        全部大写        一个单词：大写            举例：PI        多个单词：大写，并用_隔开            举例：STUDENT_MAX_AGE</code></pre><p>3:注释(掌握)  </p><pre><code>(1)就是对程序进行解释说明的文字(2)分类：    A:单行注释    //    B:多行注释    /**/    C:文档注释(后面讲) /** */(3)把HelloWorld案例写了一个带注释的版本。    后面我们要写一个程序的过程。    需求：    分析：    实现：    代码体现：(4)注释的作用    A:解释说明程序，提高了代码的阅读性。    B:可以帮助我们调试程序。        后面我们会讲解一个更高端的一个调试工具</code></pre><p>4:常量(掌握)  </p><pre><code>(1)在程序执行的过程中，其值不发生改变的量(2)分类：    A:字面值常量    B:自定义常量(后面讲)(3)字面值常量    A:字符串常量 &quot;hello&quot;    B:整数常量    12,23    C:小数常量    12.345    D:字符常量    &#39;a&#39;,&#39;A&#39;,&#39;0&#39;    E:布尔常量    true,false    F:空常量    null(后面讲)(4)在Java中针对整数常量提供了四种表现形式    A:二进制    由0，1组成。以0b开头。    B:八进制    由0，1，...7组成。以0开头。    C:十进制    由0，1，...9组成。整数默认是十进制。    D:十六进制    由0，1，...9,a,b,c,d,e,f(大小写均可)组成。以0x开头。</code></pre><p>5:进制转换(了解)  </p><pre><code>(1)其他进制到十进制    系数：就是每一个位上的数值    基数：x进制的基数就是x    权：对每一个位上的数据，从右，并且从0开始编号，对应的编号就是该数据的权。    结果：系数*基数^权次幂之和。(2)十进制到其他进制    除基取余，直到商为0，余数反转。(3)进制转换的快速转换法    A:十进制和二进制间的转换        8421码。    B:二进制到八进制，十六进制的转换</code></pre><p>6:变量(掌握)  </p><pre><code>(1)在程序的执行过程中，其值在某个范围内可以发生改变的量(2)变量的定义格式：    A:数据类型 变量名 = 初始化值;    B:数据类型 变量名;      变量名 = 初始化值;</code></pre><p>7:数据类型(掌握)  </p><pre><code>(1)Java是一种强类型语言，针对每种数据都提供了对应的数据类型。(2)分类：    A:基本数据类型：4类8种    B:引用数据类型：类，接口，数组。(3)基本数据类型    A:整数            占用字节数        byte            1        short            2        int             4        long            8    B:浮点数        float            4        double            8    C:字符        char            2    D:布尔        boolean            1    注意：        整数默认是int类型，浮点数默认是double。        长整数要加L或者l。        单精度的浮点数要加F或者f。</code></pre><p>8:数据类型转换(掌握)  </p><pre><code>(1)boolean类型不参与转换(2)默认转换    A:从小到大    B:byte,short,char -- int -- long -- float -- double    C:byte,short,char之间不相互转换，直接转成int类型参与运算。(3)强制转换    A:从大到小    B:可能会有精度的损失，一般不建议这样使用。    C:格式：        目标数据类型 变量名 = (目标数据类型) (被转换的数据);(4)思考题和面试题：    A:下面两种方式有区别吗?        float f1 = 12.345f;        float f2 = (float)12.345;    B:下面的程序有问题吗，如果有，在哪里呢?        byte b1 = 3;        byte b2 = 4;        byte b3 = b1 + b2;        byte b4 = 3 + 4;    C:下面的操作结果是什么呢?        byte b = (byte)130;    D:字符参与运算        是查找ASCII里面的值        &#39;a&#39;        97        &#39;A&#39;        65        &#39;0&#39;        48        System.out.println(&#39;a&#39;);        System.out.println(&#39;a&#39; + 1);    E:字符串参与运算        这里其实是字符串的连接        System.out.println(&quot;hello&quot;+&#39;a&#39;+1);        System.out.println(&#39;a&#39;+1+&quot;hello&quot;);        System.out.println(&quot;5+5=&quot;+5+5);        System.out.println(5+5+&quot;=5+5&quot;);  </code></pre><hr><p>1：什么是注释?注释分为几种?注释有什么作用?  </p><pre><code>就是对程序进行解释说明；分为三种，单行注释，多行注释，文档注释；解释说明，提高代码的阅读性，帮助我们调试程序。</code></pre><p>2：什么是关键字?有什么特点?  </p><pre><code>被Java语言赋予特定含义的单词；全部小写；goto和const作为保留字存在。</code></pre><p>3：什么是标识符?由哪些部分组成?常见的命名规则有哪些?  </p><pre><code>就是给类，接口，方法，变量名等其名字的字符序列；A:英文字母大小写B:数字C：$和_。</code></pre><p>4：什么是常量?常量的分类?字面值常量表现形式有哪些?    </p><pre><code>在程序执行过程中，其值不发生改变的量；A字符串B整数C小数D字符E布尔F空常量null。</code></pre><p>5：计算出十进制46对应的二进制，八进制，十六进制的值。  </p><p>至于进制的内容今天在练习一次，以后就可以不用练习了。<br>后面能听懂就OK了。不用浪费太多时间。<br>(可用计算器验证你算的是否正确)</p><p>6：什么是变量?变量的定义格式?要使用变量需要注意什么?  </p><pre><code>在程序执行过程中，其值在某个范围内可以发生改变的量；A数据类型 变量名 = 初始值；B 数据类型 变量名；变量名 = 初始化值；</code></pre><p>7：Java中的数据类型分几类?基本数据类型有哪些?  </p><pre><code>A基本数据类型：4类8种 B引用数据类型：类，接口，数组。基本数据类型：    A整数     byte short int long   1 2 4 8    B浮点数 float double   4 8    C字符 char  2    D布尔 boolean 1</code></pre><p>8：数据类型转换：  </p><pre><code>隐式转换：A从小到大 Bbyte，short，char--int--long--float--double C:byte,short,char之间不相互转换，直接转成int类型参与运算。强制转换：A:从大到小          B:可能会有精度的损失，一般不建议这样使用。          C:格式：          目标数据类型 变量名 = (目标数据类型) (被转换的数据);</code></pre><p>面试题：  </p><pre><code>    第一题：    byte b1=3,b2=4,b;    b=b1+b2;    b=3+4;    哪句是编译失败的呢？为什么呢？    第二题：    byte  by = 130;有没有问题?有问题如何解决?结果是多少呢?</code></pre><p>9：练习打字(每天十分钟,即使休息的时候，也建议练习)</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-day01</title>
      <link href="/2020/053159932.html"/>
      <url>/2020/053159932.html</url>
      
        <content type="html"><![CDATA[<p>1:计算机概述(了解)  </p><pre><code>(1)计算机(2)计算机硬件(3)计算机软件    系统软件：window,linux,mac    应用软件：qq,yy,飞秋(4)软件开发(理解)    软件：是由数据和指令组成的。(计算器)    开发：就是把软件做出来。    如何实现软件开发呢?        就是使用开发工具和计算机语言做出东西来(5)语言    自然语言：人与人交流沟通的    计算机语言：人与计算机交流沟通的        C,C++,C#,Java(6)人机交换    图形界面：操作方便只管    DOS命令：需要记忆一些常见的命令</code></pre><p>2:键盘功能键的认识和快捷键(掌握)  </p><pre><code>(1)功能键的认识    tab    shift    ctrl    alt    windos    空格    上下左右    回车    截图(2)快捷键    全选    Ctrl+A    复制    Ctrl+C    粘贴    Ctrl+V    剪切    Ctrl+X    撤销    Ctrl+Z    保存    Ctrl+S</code></pre><p>3:常见的DOS命令(掌握)  </p><pre><code>(1)常见的如下    盘符的切换        d:回车    目录的进入        cd javase        cd javase\day01\code    目录的回退        cd..        cd\    清屏        cls    退出        exit(2)其他的几个(了解)    创建目录    删除目录    创建文件    删除文件    显示目录下的内容    删除带内容的目录</code></pre><p>4:Java语言概述(了解)  </p><pre><code>(1)Java语言的发展史    Java之父    JDK1.4.2    JDK5    JDK7(2)Java语言的特点    有很多小特点，重点有两个开源，跨平台(3)Java语言是跨平台的，请问是如何保证的呢?(理解)    我们是通过翻译的案例讲解的。    针对不同的操作系统，提高不同的jvm来实现的。(4)Java语言的平台    JavaSE    JavaME--Android    JavaEE</code></pre><p>5:JDK,JRE,JVM的作用及关系(掌握)  </p><pre><code>(1)作用    JVM：保证Java语言跨平台    JRE：Java程序的运行环境    JDK：Java程序的开发环境(2)关系    JDK：JRE+工具    JRE：JVM+类库</code></pre><p>6:JDK的下载,安装,卸载(掌握)  </p><pre><code>(1)下载到官网。    A:也可以到百度搜索即可。    B:我给你。(2)安装    A:绿色版    解压就可以使用    B:安装版    必须一步一步的安装，一般只要会点击下一步即可    注意：        建议所有跟开发相关的软件都不要安装在有中文或者空格的目录下。(3)卸载    A:绿色版    直接删除文件夹    B:安装版            a:控制面板 -- 添加删除程序        b:通过专业的软件卸载工具。(比如360的软件管家卸载)</code></pre><p>7:第一个程序：HelloWorld案例(掌握)  </p><pre><code>class HelloWorld {    public static void main(String[] args) {        System.out.println(&quot;HelloWorld&quot;);    }}(1)程序解释：    A:Java程序的最基本单位是类，所以我们要定义一个类。        格式：class 类名        举例：class HelloWorld    B:在类中写内容的时候，用大括号括起来。    C:Java程序要想执行，必须有main方法。        格式：public static void main(String[] args)    D:要指向那些东西呢，也用大括号括起来。    E:你要做什么呢?今天我们仅仅做了一个简单的输出        格式：System.out.println(&quot;HelloWorld&quot;);        注意：&quot;&quot;里面的内容是可以改动的。(2)Java程序的开发执行流程：    A:编写java源程序(.java)    B:通过javac命令编译生成.class文件    C:通过java命令运行.class文件</code></pre><p>8:常见的问题(掌握)  </p><pre><code>(1)扩展名被隐藏    如何找到：工具--文件夹选项--查看--去除隐藏扩展名的那个勾勾(2)我要求文件名称和类名一致。    实际上不这样做也是可以的。    但是，注意：        javac后面跟的是文件名+扩展名        java后面跟的类名不带扩展名(3)Java语言严格区分大小写，请注意。     还有就是单词不要写错了。(4)见到非法字符: \65307肯定是中文问题。    我们写程序要求标点符号必须全部是英文状态。(5)括号的配对问题。    一般来说，括号都是成对出现的。(6)遇到    在类 HelloWorld 中找不到主方法, 请将主方法定义为    肯定是主方法的格式问题。</code></pre><p>9:path环境变量(掌握)  </p><pre><code>(1)path环境变量的作用    保证javac命令可以在任意目录下运行。    同理可以配置qq等(2)path配置的两种方案：    A:方案1(了解)    B:方案2        找到环境变量的位置，在系统变量里面        新建：            变量名：JAVA_HOME            变量值：D:\develop\Java\jdk1.7.0_60        修改：            变量名：Path            变量值：%JAVA_HOME%\bin;以前的内容</code></pre><p>10:classpath环境变量(理解)  </p><pre><code>(1)classpath环境变量的作用    保证class文件可以在任意目录下运行(2)classpath环境变量的配置    找到环境变量的位置，在系统变量里面    新建：        变量名：classpath        变量值：E:\JavaSE\day01\code\HelloWorld案例</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCS5.5——快速傅里叶变换(FFT)</title>
      <link href="/2020/052749146.html"/>
      <url>/2020/052749146.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h1><p>1、离散傅里叶变换DFT的定义：将时域的采样变换成频域的周期性离散函数，频域的采样也可以变换成时域的周期性离散函数，这样的变化称为离散傅里叶变换，简称DFT。  </p><p>2、FFT是DFT的一种快速算法。由于在计算DFT是一次复数乘法需用四次实数乘法和两次实数加法；一次复数加法需要两次实数加法。每运算一个X(k)需要4N次复数乘法及 实数加法。所以整个DFT运算总共需要 次实数乘法及 次实数加法。如此，计算时乘法次数和加法次数都是和 成正比的，当N很大时，运算量是客观的，因而需要改进带DFT的算法减少运算速度。  </p><p>根据傅里叶变换的对称性和周期性，我们可以将DFT运算中有些项合并。假设序列长度为 ,L为整数。将 的序列x(n)(n=0,1,…,N-1),按N的奇偶分成两组，分解成两个N/2点的DFT，重新组合成一个如下式表达的N点DFT:<br><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/P05271.jpg" alt="">  </p><p>将DFT的 步运算减少为 步，极大地提高了运算的速度；  </p><p>3、    旋转因子的变化规律；  </p><p>4、    碟形运算规律；  </p><p>5、    基于2FFT算法。  </p><p><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/P05272.jpg" alt=""></p><h1 id="2-记录实验数据"><a href="#2-记录实验数据" class="headerlink" title="2.记录实验数据"></a>2.记录实验数据</h1><p>按照图6-2，3进行输入信号时域，频域以及输出信号时域波形的设置。<br><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/P05273.jpg" alt=""><br>输入信号及输出信号的波形如图6-4,5,6所示：<br><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/P05274.jpg" alt=""><br>代码：</p><pre><code>#include&quot;math.h&quot;#define PI 3.1415926#define SAMPLENUMBER 128void InitForFFT();void MakeWave();int INPUT[SAMPLENUMBER],DATA[SAMPLENUMBER];float fWaveR[SAMPLENUMBER],fWaveI[SAMPLENUMBER],w[SAMPLENUMBER];float sin_tab[SAMPLENUMBER],cos_tab[SAMPLENUMBER];void FFT(float dataR[SAMPLENUMBER],float dataI[SAMPLENUMBER]){    int x0, x1, x2, x3, x4, x5, x6, xx;    int i, j, k, b, p, L;    float TR, TI, temp;/***************fllowing code invert sequence***************/    for( i = 0; i &lt; SAMPLENUMBER; i++)    {        x0=x1=x2=x3=x4=x5=x6=0;        x0=i&amp;0x01;x1=(i/2)&amp;0x01;x2=(i/4)&amp;0x01;x3=(i/8)&amp;0x01;x4=(i/16)&amp;0x01;x5=(i/32)&amp;0x01;x6=(i/64)&amp;0x01;        xx=x0*64+x1*32+x2*16+x3*8+x4*4+x5*2+x6;        dataI[xx]=dataR[i];    }    for( i = 0; i &lt; SAMPLENUMBER; i++)    {        dataR[i]=dataI[i];dataI[i]=0;    }/***********fllowing code FFT***************/    for( L = 1; L &lt;= 7; L++)    {        b=1;i=L-1;        while( i &gt; 0 ){            b=b*2;i--;        }/*b= 2^(L-1)*/        for( j = 0; j &lt;= b-1; j++ )        {            p=1;i=7-L;            while( i &gt; 0 ) /*p=pow(2,7-L)*j;*/            {                p=p*2;i--;            }            p=p*j;            for( k = j; k &lt; 128; k = k+2*b )            {                TR=dataR[k];TI=dataI[k];temp=dataR[k+b];                dataR[k]=dataR[k]+dataR[k+b]*cos_tab[p]+dataI[k+b]*sin_tab[p];                dataI[k]=dataI[k]-dataR[k+b]*sin_tab[p]+dataI[k+b]*cos_tab[p];                dataR[k+b]=TR-dataR[k+b]*cos_tab[p]-dataI[k+b]*sin_tab[p];                dataI[k+b]=TI+temp*sin_tab[p]-dataI[k+b]*cos_tab[p];            }        }    }    for( i = 0; i &lt; SAMPLENUMBER/2; i++)    {        w[i]=sqrt(dataR[i]*dataR[i]+dataI[i]*dataI[i]);    }}/*END FFT*/main(){    int i;    InitForFFT();    MakeWave();    for( i = 0; i &lt; SAMPLENUMBER; i++)    {        fWaveR[i]=INPUT[i];        fWaveI[i]=0.0f;        w[i]=0.0f;    }    FFT(fWaveR,fWaveI);    for(i = 0; i &lt; SAMPLENUMBER; i++)    {        DATA[i]=w[i];    }    while(1);  //break point}void InitForFFT(){    int i;    for(i = 0; i &lt; SAMPLENUMBER; i++)    {        sin_tab[i]=sin(PI*2*i/SAMPLENUMBER);        cos_tab[i]=cos(PI*2*i/SAMPLENUMBER);    }}void MakeWave(){    int i;    for( i=0; i&lt;SAMPLENUMBER; i++ )    {        INPUT[i]=sin(PI*2*i/SAMPLENUMBER*3)*1024;    }}  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客之备份与恢复</title>
      <link href="/2020/050127743.html"/>
      <url>/2020/050127743.html</url>
      
        <content type="html"><![CDATA[<h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><p>1、在你的博客仓库创建一个分支<code>hexo</code>（这个命名随意）；</p><p>2、设置<code>hexo</code>为默认分支（不知道怎么设的可以百度）；<br>( <font color="ff0000">第一步和第二步都在<a href="https://github.com/" target="_blank" rel="noopener">github</a>网站中操作</font>)  </p><p>3、将博客仓库<code>hexo分支</code>clone至本地，<br>在本地新建一个文件夹<code>hexo</code>，并在此文件夹中右击鼠标打开<code>git bash</code>,执行命令  </p><pre><code>git clone git@github.com:Username/Username.github.io.git  </code></pre><p>(<font color="ff0000"><code>Username</code>为你自己的名字</font>)<br>克隆完之后在<code>hexo</code>文件夹中会出现新的Username.github.io文件夹，将其中的文件全部删除，只保留<code>.git\</code>文件夹。</p><p>将之前的博客根目录文件夹中的<br><code>_config.yml</code>，<code>themes/</code>，<code>source</code>，<code>scffolds/</code>，<code>package.json</code>，<code>.gitignore</code>复制到Username.github.io文件夹；（<code>Username</code>是你自己的用户名）</p><a id="more"></a><p>4、将themes/next/(是NexT主题)中的<code>.git/</code>删除，否则无法将主题文件夹<code>push</code>；( <font color="ff0000"><code>matery</code>主题中没有这个文件夹，应该就不用删除了</font>)</p><p>5、在Username.github.io文件夹执行<code>git add .</code>，<code>git commit -m &quot;提交文件&quot;</code>，<code>git push origin hexo</code>来提交hexo网站源文件；( <font color="ff0000">命令中的<code>hexo</code>为你创建的分支的名字</font>)    </p><p>6、执行<code>hexo g -d</code>生成静态网页部署到github上。<br>这样，Username.github.io仓库就有master分支保存静态网页，hexo分支保存源文件。<br>到这里备份就完成了。  </p><h1 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h1><h2 id="此后所有的博客操作都在Username-github-io文件夹中进行"><a href="#此后所有的博客操作都在Username-github-io文件夹中进行" class="headerlink" title="( 此后所有的博客操作都在Username.github.io文件夹中进行)"></a>( <font color="ff0000">此后所有的博客操作都在Username.github.io文件夹中进行</font>)</h2><h3 id="在本地对博客修改（包括修改主题样式、发布新文章等）后在Username-github-io文件夹中依次执行命令"><a href="#在本地对博客修改（包括修改主题样式、发布新文章等）后在Username-github-io文件夹中依次执行命令" class="headerlink" title="在本地对博客修改（包括修改主题样式、发布新文章等）后在Username.github.io文件夹中依次执行命令"></a>在本地对博客修改（包括修改主题样式、发布新文章等）后在Username.github.io文件夹中依次执行命令</h3><pre><code>git add .  git commit -m &quot;提交文件  git push origin hexo  hexo g -d  </code></pre><p>即在每次修改完本地博客后重复执行5、6步来完成来提交hexo网站源文件和生成静态网页部署到github上。  </p><h1 id="恢复博客"><a href="#恢复博客" class="headerlink" title="恢复博客"></a>恢复博客</h1><p>换电脑想改博客：  </p><p>1、安装git；  </p><p>2、安装Nodejs和npm；  </p><p>3、使用克隆命令<code>git clone git@github.com:Username/Username.github.io.git</code>将仓库拷贝至本地；  </p><p>4、在文件夹内执行命令<code>npm install hexo-cli -g</code>、<code>npm install</code>、<code>npm install hexo-deployer-git</code>；</p><h2 id="添加ssh-keys"><a href="#添加ssh-keys" class="headerlink" title="添加ssh-keys"></a>添加ssh-keys</h2><p>在终端下运行：<code>ssh-keygen -t rsa -C &quot;yourname@email.com&quot;</code>，一路回车；<br>会在.ssh目录生成<code>id_rsa</code>、<code>id_rsa.pub</code>两个文件，这就是密钥对，<code>id_rsa</code>是私钥，千万不能泄漏出去；  </p><p>登录<a href="https://github.com/" target="_blank" rel="noopener">Github</a>，打开「Settings」–&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥<code>id_rsa.pub</code>文件的内容，注意不要粘贴成<code>id_rsa</code>，最后点击「Add SSH Key」。</p><blockquote><p><font color="ff0000">版权声明：本文为个人总结，欢迎转载，转载请注明出处，勿用于商业用途！</font>   </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建Hexo+Coding(最新教程)</title>
      <link href="/2020/042226283.html"/>
      <url>/2020/042226283.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Hexo搭建"><a href="#1-Hexo搭建" class="headerlink" title="1. Hexo搭建"></a>1. Hexo搭建</h1><h2 id="1-nodejs，Git环境搭建："><a href="#1-nodejs，Git环境搭建：" class="headerlink" title="1.nodejs，Git环境搭建："></a>1.nodejs，Git环境搭建：</h2><ul><li><a href="https://blog.csdn.net/qq_43285335/article/details/90696126" target="_blank" rel="noopener">node.js搭建</a> </li><li><a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html" target="_blank" rel="noopener">git搭建</a>-<br><a href="https://www.cnblogs.com/luyuandatabase/p/12145707.html" target="_blank" rel="noopener">淘宝云配置</a> </li></ul><h2 id="2-注册github"><a href="#2-注册github" class="headerlink" title="2.注册github"></a>2.注册github</h2><ol><li>注册就不用我说了，创建仓库视频里有，然后这个也很简单，不会就百度（应该没人去百度<br>的，太简单了）</li><li>格式要求：gfyuan.github.io</li></ol><h2 id="3-快速利用hexo搭建博客："><a href="#3-快速利用hexo搭建博客：" class="headerlink" title="3.快速利用hexo搭建博客："></a>3.快速利用hexo搭建博客：</h2><p> 1.<a href="https://hexoscript.gitbook.io/hexo-script/" target="_blank" rel="noopener">Hexo脚本教程</a>  </p><p> 2.<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">主题安装及优化</a>  </p><h1 id="2-Coding创建项目"><a href="#2-Coding创建项目" class="headerlink" title="2.Coding创建项目"></a>2.Coding创建项目</h1><h3 id="1-首先，去Coding官网注册一个账号，接着，点击“-创建项目”-创建一个新项目。"><a href="#1-首先，去Coding官网注册一个账号，接着，点击“-创建项目”-创建一个新项目。" class="headerlink" title="1.首先，去Coding官网注册一个账号，接着，点击“+ 创建项目”,创建一个新项目。"></a>1.首先，去Coding<a href="coding.net">官网注册</a>一个账号，接着，点击“+ 创建项目”,创建一个新项目。</h3><ul><li>选择项目模板<br><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/P052211.jpg" alt=""><ul><li>创建项目<br><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/P052212.jpg" alt=""> <h3 id="2-同步本地hexo到coding上"><a href="#2-同步本地hexo到coding上" class="headerlink" title="2.同步本地hexo到coding上"></a>2.同步本地hexo到coding上</h3>把获取到了ssh配置在上面的<code>_config.yml</code>文件中的deploy下，<pre><code>deploy:type: gitrepo:    github: git@github.com:你的用户名/你的仓库名.github.io.git   coding: git@e.coding.net:你的用户名/你的仓库名.gitbranch: master</code></pre>如果是第一次使用coding的话，需要设置SSH公钥，生成的方法可以参考<a href="https://help.coding.net/" target="_blank" rel="noopener">coding帮助中心</a>   </li></ul></li></ul><p>当然这里直接使用之前部署github时已经生成的公钥。<br><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/P052213.jpg" alt="">    </p><p>添加后，在<code>git bash</code>命令输入：</p><pre><code>ssh -T git@git.coding.net</code></pre><p>如果得到下面提示就表示公钥添加成功了：</p><pre><code>Coding.net Tips : [Hello ! You&#39;ve conected to Coding.net by SSH successfully! ]</code></pre><p>最后使用部署命令就能把博客同步到coding上面：</p><pre><code>hexo g -d</code></pre><p><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/P052214.jpg" alt=""> </p><h1 id="3-pages服务方式部署"><a href="#3-pages服务方式部署" class="headerlink" title="3.pages服务方式部署"></a>3.pages服务方式部署</h1><ul><li><p>你在你的仓库里是找不到pages页面的需要进行以下操作<br><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/P1.png" alt="">   </p><ul><li>勾选上持续部署和持续集成<br><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/P2.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/P3.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/P4.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/P5.png" alt=""><br>然后就可通过访问地址访问自己的博客啦！</li></ul></li><li><p>如果你有自己的私人域名也可以绑定自己的域名<br><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/P6.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/P7.png" alt="">  然后在你的域名服务台解析到你的博客访问地址即可通过域名访问博客。  </p></li></ul><blockquote><p><font color="ff0000">版权声明：本文为个人总结，欢迎转载，转载请注明出处，勿用于商业用途！</font>  </p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1443900438&auto=1&height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你若安好，便是晴天</title>
      <link href="/2020/032134362.html"/>
      <url>/2020/032134362.html</url>
      
        <content type="html"><![CDATA[<hr><p> 晨起，窗外的阳光已是浩浩荡荡，远山苍绿如黛。夏天，就这样不慌不忙地来到身边，草木深深，风华绝代。</p><p>人生匆匆的聚散里，往事如烟，陌上花开如旧，而我们，却在凡俗的烟火里，承担岁月带给我们的浮世沧桑。青梅煮酒，一如旧时的味道，而那些走散的人，却再不会再回来。</p><p>我们都是光阴里的过客，有些人只是擦肩而过，有些人会短暂的停留，而有些人会携手白头。凡尘的烟火缭绕，我们总是在如烟的世海里丢了自己。岁月，偷换的又岂止是青春红颜，还有那些最初的情怀。</p><p>我们都只是拥挤红尘里孤独的赶路人，寂寞时，我们需要回忆相伴；迷茫时，我们需要情怀偎依取暖。</p><p>世间所有女子都曾如精灵般存在，或是柔情，或是灵动，在光阴里含笑，为一场雨动情。爱人间的莺歌燕舞，爱江南的山温水软，爱世间一切美好的东西。</p><p>世间所有女子都曾有过绝代的风华，有些人将这风华酿成一坛芬芳的酒酿，沉醉岁月；而有些，却在生活的枝头渐次苍白，一一凋落。</p><p>生活百味纷杂，尝过人情世味，看过世态炎凉，浸泡在红尘的染缸里，她们都不复当初的模样。世事如刀，所有最初的情怀、柔肠和优雅，被一点点削减。 </p><p><img src="https://cdn.jsdelivr.net/gh/MoreInterests/CDN/MoreInterests-PIC21a87bce-674a-4981-b056-60c22a7935d3.jpg" alt=""> </p><p>风景生动的城里，古城温暖的阳光里，江南水乡的石桥上，总有那怀着温润洁净情怀的女子走过；寻常的巷陌里，小镇的溪水旁，乡间的田野里，总有女子在为生活而奔忙。从她们降生在人间开始，便有万千色彩的故事等着她们去演绎。有悲欢，有离合，有酸甜，有苦辣。</p><p>不知在什么时候，便喜欢上这两个字：惜缘。佛说，前世五百次的回眸，换来今生的擦肩而过。</p><p>张爱玲也说：于千万人之中遇见你所要遇见的人, 于千万年之中, 时间的无涯的荒野里, 没有早一步, 也没有晚一步, 刚巧赶上了, 没有别的话可说, 惟有轻轻地问一声: “ 噢, 你也在这里?”</p><p>可见人与人的相遇是多么难得的缘分，所以我们应该学会珍惜，任何错过和伤害都是对缘分的蹉跎。</p><p>有时，行走在摩肩接踵的人群中，心中便会涌出莫名的感动，每一个来来去去的生命，都有他们的烟火幸福，有他们完整的故事。</p><p>邂逅一个人，只需片刻，爱上一个人，往往会是一生。</p><p>徐志摩说：一生至少该有一次,为了某个人而忘了自己,不求结果,不求同行,不求曾经拥有,甚至不求你爱我.只求在我最美的年华里,遇见你！</p><p>爱上一个人，是涅槃，亦是重生。因为爱了，所以听风含情，花柳带笑；因为爱了，所以感时花溅泪，恨别鸟惊心；因为爱了！   </p><hr><pre><code>                         初心亦在 有缘再见</code></pre>]]></content>
      
      
      <categories>
          
          <category> 美文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github博客搭建入门</title>
      <link href="/2020/031034155.html"/>
      <url>/2020/031034155.html</url>
      
        <content type="html"><![CDATA[<h1 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h1><h2 id="安装需要的编辑软件"><a href="#安装需要的编辑软件" class="headerlink" title="安装需要的编辑软件"></a>安装需要的编辑软件</h2><ul><li>Typora<br>个人建议在国内的软件上下载，不要去官网，下载慢  </li><li>vs code<br>轻量级文档编辑器  </li></ul><h2 id="1-nodejs，Git环境搭建："><a href="#1-nodejs，Git环境搭建：" class="headerlink" title="1.nodejs，Git环境搭建："></a>1.nodejs，Git环境搭建：</h2><ul><li><a href="https://blog.csdn.net/qq_43285335/article/details/90696126" target="_blank" rel="noopener">node.js搭建</a> </li><li><a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html" target="_blank" rel="noopener">git搭建</a>-<br><a href="https://www.cnblogs.com/luyuandatabase/p/12145707.html" target="_blank" rel="noopener">淘宝云配置</a> </li></ul><h2 id="2-注册github"><a href="#2-注册github" class="headerlink" title="2.注册github"></a>2.注册github</h2><ol><li>注册就不用我说了，创建仓库视频里有，然后这个也很简单，不会就百度（应该没人去百度<br>的，太简单了）</li><li>格式要求：gfyuan.github.io</li></ol><h2 id="3-快速利用hexo搭建博客："><a href="#3-快速利用hexo搭建博客：" class="headerlink" title="3.快速利用hexo搭建博客："></a>3.快速利用hexo搭建博客：</h2><p> 1.<a href="https://hexoscript.gitbook.io/hexo-script/" target="_blank" rel="noopener">脚本教程</a>  </p><p> 2.<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">主题安装及优化</a> </p><p> <a href="https://www.jianshu.com/p/1e402922ee32" target="_blank" rel="noopener">Markdown入门</a></p>]]></content>
      
      
      <categories>
          
          <category> 网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客撰写教程</title>
      <link href="/2020/022054914.html"/>
      <url>/2020/022054914.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Markdown——入门指南"><a href="#1-Markdown——入门指南" class="headerlink" title="1.Markdown——入门指南"></a>1.Markdown——入门指南</h2><h1 id="导语："><a href="#导语：" class="headerlink" title="导语："></a>导语：</h1><p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。 </p><h2 id="Markdown-语法的简要规则"><a href="#Markdown-语法的简要规则" class="headerlink" title="Markdown 语法的简要规则"></a>Markdown 语法的简要规则</h2><ul><li><p>标题 </p><p>  #一级标题</p><p>  ##二级标题</p><p>  ###三级标题 </p></li><li><p>无序列表  </p></li></ul><p>*1<br>*2<br>*3</p><ul><li>有序列表   </li></ul><p>1.1<br>1.2<br>1.3  </p><ul><li>图片与链接<br>图片为：! [ ] ( )<br>链接为：[ ] ( )  </li><li>粗体  </li></ul><p><strong>中文本为斜体<br>**</strong>中为粗体  </p><ul><li>分割线<br>三个*为分割线  </li><li>代码框<br>一个``<br>例如：<br><code>if(a&lt;b)   {c=b;}</code>     </li><li>行内代码  <pre><code>coding: git@e.coding.net:</code></pre></li></ul><p><a href="https://www.jianshu.com/p/1e402922ee32" target="_blank" rel="noopener">文章出处</a>  </p><hr><h2 id="2-文章-Front-matter-介绍"><a href="#2-文章-Front-matter-介绍" class="headerlink" title="2.文章 Front-matter 介绍"></a>2.文章 Front-matter 介绍</h2><p>Front-matter 选项详解<br>Front-matter 选项中的所有内容均为非必填的。但我仍然建议至少填写 title 和 date 的值。</p><p>配置选项    默认值    描述<br><strong>title</strong>    Markdown 的文件标题    文章标题，强烈建议填写此选项<br><strong>date</strong>    文件创建时的日期时间    发布时间，强烈建议填写此选项，且最好保证全局唯一<br><strong>author</strong>    根 _config.yml 中的 author    文章作者<br><strong>img</strong>    featureImages 中的某个值    文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <a href="http://xxx.com/xxx.jpg" target="_blank" rel="noopener">http://xxx.com/xxx.jpg</a></p><p>  其余规则见<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">文章出处</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/021516107.html"/>
      <url>/2020/021516107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
